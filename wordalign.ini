### MAIN TARGET ###############################################################

[wordalign-%{frnlang}]
type = task
deps = wordalign/%{frnlang}-eng-train.dict wordalign/%{frnlang}-eng-traindevtest.dict

### DATA ######################################################################

[wordalign/eng-%{frnlang}-%{part}.%{lang}.tok]
cond = %{lang in ('eng', frnlang) and part in ('traindevtest', 'train')}
outputs = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.tok wordalign/eng-%{frnlang}-%{part}.eng.ids wordalign/eng-%{frnlang}-%{part}.%{frnlang}.ids
dep.data_wordalign = src/python/data_wordalign.py
recipe =
	set -e
	echo For this recipe to execute successfully, the .tok files for the
	echo relevant documents must already exist. Produce the wordalign-%{frnlang}
	echo target in produce.ini to ensure that.
	mkdir -p wordalign
	python3 %{data_wordalign} %{frnlang} %{part}

### WORD ALIGNMENT ############################################################

# The following rules follow the tutorial at:
# http://fabioticconi.wordpress.com/2011/01/17/how-to-do-a-word-alignment-with-giza-or-mgiza-from-parallel-corpus/

# Convert to lower case
[wordalign/eng-%{frnlang}-%{part}.%{lang}.low]
cond = %{lang in ('eng', frnlang)}
dep.tok = wordalign/eng-%{frnlang}-%{part}.%{lang}.tok
recipe = cat %{tok} | tr '[:upper:]' '[:lower:]' > %{target}

# Create vocabulary files and numeric versions of texts
[wordalign/eng-%{frnlang}-%{part}.%{lang}.%{x}]
cond = %{lang in ('eng', frnlang)}
engsnt = wordalign/eng-%{frnlang}-%{part}.eng.snt
frnsnt = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.snt
engvcb = wordalign/eng-%{frnlang}-%{part}.eng.vcb
frnvcb = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.vcb
outputs =%{engsnt} %{frnsnt} %{engvcb} %{frnvcb}
dep.englow = wordalign/eng-%{frnlang}-%{part}.eng.low
dep.frnlow = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.low
recipe =
	set -e
	set -o pipefail
	./ext/mgizapp/bin/plain2snt %{frnlow} %{englow} -vcb1 %{frnvcb} -vcb2 %{engvcb} -snt1 %{frnsnt} -snt2 %{engsnt}
	touch %{outputs}

# Cluster vocabulary into classes
[wordalign/eng-%{frnlang}-%{part}.%{lang}.vcb.classes]
cond = %{lang in ('eng', frnlang)}
dep.low = wordalign/eng-%{frnlang}-%{part}.%{lang}.low
recipe = ./ext/mgizapp/bin/mkcls -n10 -p%{low} -V%{target}

# Make co-occurrence file
[wordalign/%{frnlang}-eng-%{part}.cooc]
dep.srcvcb = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.vcb
dep.trgvcb = wordalign/eng-%{frnlang}-%{part}.eng.vcb
dep.srcvcbclasses = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.vcb.classes
dep.trgvcbclasses = wordalign/eng-%{frnlang}-%{part}.eng.vcb.classes
dep.snt = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.snt
recipe = ./ext/mgizapp/bin/snt2cooc %{target} %{srcvcb} %{trgvcb} %{snt}

# Word-align
[wordalign/%{frnlang}-eng-%{part}.dict]
dep.srcvcb = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.vcb
dep.trgvcb = wordalign/eng-%{frnlang}-%{part}.eng.vcb
dep.snt = wordalign/eng-%{frnlang}-%{part}.%{frnlang}.snt
dep.cooc = wordalign/%{frnlang}-eng-%{part}.cooc
ncpus = 4
recipe =
	set -e
	set -o pipefail
	(./ext/mgizapp/bin/mgiza -ncpus %{ncpus} -sourcevocabularyfile %{srcvcb} -targetvocabularyfile %{trgvcb} -corpusfile %{snt} -outputfileprefix wordalign/%{frnlang}-eng.dict -coocurrencefile %{cooc} 1>&2) 2> %{target}.log
	cat %{'wordalign/{}-eng.dict.A3.final.part{}'.format(frnlang, chr(48 + i)) for i in range(int(ncpus))} | python3 ./src/python/dictsort.py > %{target}
