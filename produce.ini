### UTILITIES #################################################################

[]
prelude =
	import errno
	import os
	import subprocess

	def makedirs(path):
		try:
			os.makedirs(path)
		except OSError as error:
			if error.errno != errno.EEXIST:
				raise error

	def sync_bows(sentence_id, user, layer):
		"""
		Makes the file %%{x}/%%{user}/%%{layer}.bows up to date with
		information from the database. Does not change its timestamp if
		its contents do not change. Returns True if there were changes,
		False otherwise.

		This is an ugly trick to simulate a dependency into the
		database. Produce 3.0 will have a feature making this trick
		superfluous.
		"""
		dirpath = os.path.join('out', sentence_id[:2], sentence_id)
		makedirs(dirpath)
		filepath = os.path.join(dirpath, '{}.{}.bows'.format(user, layer))
		bowlist = subprocess.check_output(['python3', './src/python/bows_tsv.py', sentence_id, user, layer]).decode('UTF-8')
		try:
			with open(filepath, encoding='UTF-8') as f:
				old_bowlist = f.read()
			if old_bowlist == bowlist:
				return False
		except FileNotFoundError:
			pass
		with open(filepath, 'w', encoding='UTF-8') as f:
			f.write(bowlist)
		return True

[dummy]
# Dummy task. Targets depending on this will be reproduced on every invocation.
type = task

### TOKENIZATION ##############################################################

[out/%{x}/%{user}.tok.iob]
dep.raw = raw/%{x}.raw
dep.txt2iob = src/python/txt2iob.py
dep.elephant = ext/elephant/elephant
dep.model = models/tok.iob/en.model
recipe =
	set -e
	set -o pipefail
	mkdir -p `dirname %{target}`
	export PATH=ext/elephant/ext:$PATH
	cat %{raw} | python3 %{txt2iob} | ./ext/viasock/viasock run --process-timeout 60 --server-timeout 86400 -t '^$' -T '^$' --log log/elephant/en.log %{elephant} -m %{model} -f iob -F iob | sed -e 's/\t/ /' > %{target}

[out/%{x}/%{user}.tok.off]
dep.iob = out/%{x}/%{user}.tok.iob
dep.iob2off = src/python/iob2off.py
recipe = cat %{iob} | python %{iob2off} > %{target}

[out/%{x}/%{user}.tok]
dep.off = out/%{x}/%{user}.tok.off
dep.off2tok = src/python/off2tok.py
recipe = cat %{off} | python %{off2tok} > %{target}

### SUPERTAGGING ##############################################################

# We leave the supertagging mainly to the parser, but if there is a BOW, we
# constrain it to use that supertag.

[out/%{prefix}/%{sid}/%{user}.super]
dep.off = out/%{prefix}/%{sid}/%{user}.tok.off
dep.bows = ./src/python/bows_super.py
dep.bowfile = out/%{prefix}/%{sid}/%{user}.super.bows
deps = %{'dummy' if sync_bows(sid, user, 'super') else ''}
recipe = python3 %{bows} %{bowfile} %{off} > %{target}

### PARSING ###################################################################

# TODO include span constraints (e.g. "there is a constituent from 7 22")
[out/%{x}/%{user}.parse]
dep.tok = out/%{x}/%{user}.tok
dep.super = out/%{x}/%{user}.super
dep.add_supertag_constraints = src/python/add_supertag_constraints.py
dep.cac_renumber = src/python/cac_renumber.py
dep.easyccg = ext/easyccg/easyccg.jar
#generic = %{'' if lang == 'en' else ' -g'}
generic =
dep.model = models/parse/en.model
recipe =
	set -e
	set -o pipefail
	cat %{tok} | python %{add_supertag_constraints} %{super} | ./ext/viasock/viasock run --process-timeout 60 --server-timeout 86400 --log log/easyccg/en.log --output-terminator '^$' --output-prelude 1 java -jar %{easyccg} --inputFormat constrained --model %{model}%{generic} --unrestrictedRules --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer | python %{cac_renumber} > %{target}

# Add tags from other layers to parse
[out/%{x}/%{user}.parse.tags]
dep.parse = out/%{x}/%{user}.parse
dep.insert = ./src/python/cac_addtags.py
deps = src/python/caclib.py
dep.off = out/%{x}/%{user}.tok.off
recipe = cat %{parse} | %{insert} %{off} from <(cut -d ' ' -f 1 %{off}) to <(cut -d ' ' -f 2 %{off}) > %{target}

### BOXING ####################################################################

# Run Boxer for derivations (XML output)
[out/%{x}/%{user}.der.xml.incomplete]
dep.parse = out/%{x}/%{user}.parse.tags
dep.boxer = ext/boxer/boxer2
recipe = %{boxer} --input %{parse} --semantics der --resolve false --tense --instantiate --modal --theory sdrt --copula false --nn --elimeq --roles verbnet --format xml --warnings false --output %{target}

# Create an XML file containing all tags, used for adding missing derivation placeholders
[out/%{x}/%{user}.lex.xml]
dep.off = out/%{x}/%{user}.tok.off
dep.cols2xml = src/python/cols2xml.py
dep.super = out/%{x}/%{user}.super
recipe = paste <(cut -d ' ' -f 3 %{off}) <(cut -d ' ' -f 4- %{off}) <(cut -d ' ' -f 1 %{off}) <(cut -d ' ' -f 2 %{off}) %{super} | python %{cols2xml} from to super > %{target}

# Add placeholders for sentences missing derivations to Boxer output
[out/%{x}/%{user}.der.xml]
dep.incomplete = out/%{x}/%{user}.der.xml.incomplete
dep.lexxml = out/%{x}/%{user}.lex.xml
dep.dermerge = ./src/python/dermerge.py
recipe = python %{dermerge} %{incomplete} %{lexxml} > %{target}
