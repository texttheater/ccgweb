[]
prelude =
	import os

# Main target

[projtrain-%{lang}]
type = task
deps = projtrain/experiments/%{lang}_projected_dev/projected.eval

# Part 1: extract training data

[projtrain/experiments/%{lang}_projected_train/gold.parse.tags]
out.dev = projtrain/experiments/%{lang}_projected_dev/gold.parse.tags
dep.data_projtrain = src/python/data_projtrain.py
recipe = %{data_projtrain} %{lang} %{target} %{dev}

[projtrain/experiments/%{lang}_projected_dev/gold.parse.tags]
deps = projtrain/experiments/%{lang}_projected_train/gold.parse.tags

# Part 2: put everything into the place where EasyCCG's train.sh expects it

[projtrain/polyglot-%{lang}/embeddings.raw]
dep.pkl = embeddings/polyglot-%{lang[:2]}.pkl
depl.polyglot2turian = ./src/python/polyglot2turian.py
recipe =
	set -e
	mkdir -p projtrain/polyglot-%{lang}
	%{polyglot2turian} %{pkl} > %{target}

[projtrain/polyglot-%{lang}/embeddings.words]
outputs = projtrain/polyglot-%{lang}/embedings.vectors
dep.raw = projtrain/polyglot-%{lang}/embeddings.raw
dep.splitEmbeddings = ./ext/easyccg/training/splitEmbeddings.sh
recipe = %{splitEmbeddings} projtrain/polyglot-%{lang}

[projtrain/polyglot-%{lang}/embeddings.vectors]
deps = projtrain/polyglot-%{lang}/embeddings.words

[projtrain/experiments/%{lang}_projected_%{portion}/gold.stagged]
cond = %{portion in ('train', 'dev')}
dep.parse = projtrain/experiments/%{lang}_projected_%{portion}/gold.parse.tags
dep.parse2stagged = src/prolog/parse2stagged.pl
recipe =
	set -e
	mkdir -p %{os.path.dirname(target)}
	swipl -l %{parse2stagged} -g main %{parse} > %{target}

[projtrain/experiments/%{lang}_projected_%{portion}/gold.raw]
cond = %{portion in ('train', 'dev')}
dep.parse2raw = src/prolog/parse2raw.pl
dep.parse = projtrain/experiments/%{lang}_projected_%{portion}/gold.parse.tags
recipe =
	set -e
	mkdir -p %{os.path.dirname(target)}
	swipl -l %{parse2raw} -g main %{parse} > %{target}

[projtrain/experiments/%{lang}_projected_%{portion}/seenRules]
cond = %{portion in ('train', 'dev')}
dep.parse2seenRules = src/prolog/parse2seenRules.pl
dep.parse = projtrain/experiments/%{lang}_projected_%{portion}/gold.parse.tags
recipe =
	set -e
	mkdir -p %{os.path.dirname(target)}
	swipl -l %{parse2seenRules} -g main %{parse} | cut -d ' ' -f 1-2 > %{target}

[projtrain/experiments/%{lang}_projected_%{portion}/unaryRules]
cond = %{portion in ('train', 'dev')}
dep.parse2unaryRules = src/prolog/parse2unaryRules.pl
dep.parse = projtrain/experiments/%{lang}_projected_%{portion}/gold.parse.tags
recipe =
	set -e
	mkdir -p %{os.path.dirname(target)}
	swipl -l %{parse2unaryRules} -g main %{parse} > %{target}

# Part 3: train

[projtrain/polyglot-%{lang}/train.projected/bestModel]
dep.train = ./ext/easyccg/training/train.sh
embeddings = projtrain/polyglot-%{lang}
dep.embeddings_words = %{embeddings}/embeddings.words
dep.embeddings_vectors = %{embeddings}/embeddings.vectors
train_data = projtrain/experiments/%{lang}_projected_train
dev_data = projtrain/experiments/%{lang}_projected_dev
dep.train_stagged = %{train_data}/gold.stagged
dep.dev_stagged = %{dev_data}/gold.stagged
recipe =
	set -e
	export TORCH=`realpath ext/torch/install/bin/th`
	embeddings=`realpath %{embeddings}`
	train_data=`realpath %{train_data}`
	dev_data=`realpath %{dev_data}`
	cd ext/easyccg/training
	./train.sh $embeddings 0 3 3 $train_data $dev_data projected

[projtrain/polyglot-%{lang}/model.projected]
train_data = projtrain/experiments/%{lang}_projected_train
train_folder = projtrain/polyglot-%{lang}/train.projected
dep.bestModel = %{train_folder}/bestModel
dep.unaryRules = %{train_data}/unaryRules
dep.seenRules = %{train_data}/seenRules
embeddings = projtrain/polyglot-%{lang}
recipe =
	set -e
	mkdir -p %{target}
	cp %{unaryRules} %{target}
	cp %{seenRules} %{target}
	cp %{train_folder}/categories %{target}
	cp %{train_folder}/suffixes %{target}
	export TORCH=`realpath ext/torch/install/bin/th`
	embeddings=`realpath %{embeddings}`
	train_folder=`realpath %{train_folder}`
	model=`realpath %{target}`
	cd ext/easyccg/training
	$TORCH dump_model.lua $embeddings $train_folder $model
	touch $model

# Part 4: evaluate (only a sanity check)

[projtrain/experiments/%{lang}_projected_dev/projected.parse]
dep.easyccg = ext/easyccg/easyccg.jar
dep.model = projtrain/polyglot-%{lang}/model.projected
dep.raw = projtrain/experiments/%{lang}_projected_dev/gold.raw
recipe = java -jar %{easyccg} -m %{model} -f %{raw} -l 200 -i tokenized --supertaggerbeam 0.00001 -o boxer > %{target}

[projtrain/experiments/%{lang}_projected_dev/projected.stagged]
dep.parse = projtrain/experiments/%{lang}_projected_dev/projected.parse
dep.parse2stagged = src/prolog/parse2stagged.pl
deps = src/prolog/ccg.pl
recipe = swipl -l %{parse2stagged} -g main %{parse} > %{target}

[projtrain/experiments/%{lang}_projected_dev/projected.eval]
dep.projected = projtrain/experiments/%{lang}_projected_dev/projected.stagged
dep.gold = projtrain/experiments/%{lang}_projected_dev/gold.stagged
# TODO dependency evaluation
dep.eval_stagged = src/python/eval_stagged.py
recipe =
	set -o pipefail
	%{eval_stagged} %{gold} %{projected} | tee %{target}
