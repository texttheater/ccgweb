### RAW #######################################################################

[raw/%{lang}/%{pr}/%{sid}.raw]
dep.raw = src/python/raw.py
recipe =
	set -e
	mkdir -p raw/%{lang}/%{pr}
	python3 %{raw} %{lang} %{sid} > %{target}

### TOKENIZATION ##############################################################

[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.iob]
dep.raw = raw/eng/%{pr}/%{sid}.raw
dep.txt2iob = src/python/txt2iob.py
dep.elephant = ext/elephant/elephant
dep.model = models/tok.iob/%{lang}.model
recipe =
	set -e
	set -o pipefail
	mkdir -p `dirname %{target}`
	export PATH=ext/elephant/ext:$PATH
	cat %{raw} | python3 %{txt2iob} | ./ext/viasock/viasock run --process-timeout 60 --server-timeout 86400 -t '^$' -T '^$' --log log/elephant/en-proj.log %{elephant} -m %{model} -f iob -F iob | sed -e 's/\t/ /' > %{target}

[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.off]
dep.iob = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.iob
dep.iob2off = src/python/iob2off.py
recipe = cat %{iob} | python %{iob2off} > %{target}

[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok]
dep.off = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.off
dep.off2tok = src/python/off2tok.py
recipe = cat %{off} | python %{off2tok} > %{target}

### PARSING ###################################################################

[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.parse]
dep.tok = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok
dep.cac_renumber = src/python/cac_renumber.py
dep.easyccg = ext/easyccg/easyccg.jar
#generic = %{'' if lang == 'en' else ' -g'}
generic =
dep.model = ext/easyccg/model_rebank
recipe =
	set -e
	set -o pipefail
	cat %{tok} | ./ext/viasock/viasock run --process-timeout 60 --server-timeout 86400 --log log/easyccg/en-proj.log --output-terminator '^$' --output-prelude 1 java -jar %{easyccg} --model %{model}%{generic} --unrestrictedRules --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer | python %{cac_renumber} > %{target}
	#cat %{constrained} | java -jar %{easyccg} --inputFormat constrained --model %{model}%{generic} --unrestrictedRules --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer | python %{cac_renumber} > %{target}

# Add tags from other layers to parse
[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.parse.tags]
dep.parse = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.parse
dep.insert = ./src/python/cac_addtags.py
deps = src/python/caclib.py
dep.off = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.off
recipe = cat %{parse} | %{insert} %{off} from <(cut -d ' ' -f 1 %{off}) to <(cut -d ' ' -f 2 %{off}) > %{target}

# Convert derivations to XML
[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.der.xml.incomplete]
dep.parse = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.parse.tags
dep.parse2xml = src/prolog/parse2xml.pl
deps = src/prolog/util.pl src/prolog/slashes.pl
recipe = swipl -l %{parse2xml} -g main %{parse} > %{target}

# Create an XML file containing all tags, used for adding missing derivation placeholders
[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.lex.xml]
dep.off = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.tok.off
dep.cols2xml = src/python/cols2xml.py
recipe = paste <(cut -d ' ' -f 3 %{off}) <(cut -d ' ' -f 4- %{off}) <(cut -d ' ' -f 1 %{off}) <(cut -d ' ' -f 2 %{off}) | python %{cols2xml} from to > %{target}

# Add placeholders for sentences missing derivations to parser output
[out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.der.xml]
dep.incomplete = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.der.xml.incomplete
dep.lexxml = out/%{lang}/%{pr}/%{tid}/proj/%{sid}/proj.lex.xml
dep.dermerge = ./src/python/dermerge.py
recipe = python %{dermerge} %{incomplete} %{lexxml} > %{target}
